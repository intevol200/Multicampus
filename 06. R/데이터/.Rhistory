# (2) package 를 불러온다 (library, require 함수 이용)
# (3) 원하는 함수를 사용한다
#install.packages("tidyverse")
install.packages("ggplot2")
#패키지 경로와  목록보기
searchpaths()
#패키지목록보기
search()
#패키지 경로와  목록보기
searchpaths()
########################2일차 3시간
#텍스트 데이터 읽어오기
a = c(1,2,3,4,5)
write.csv(a, file = "aa.txt", row.names = paste("R", a, sep = "") )
read.csv("aa.txt")
###########
id = c(1,2,3)
gender = c("남자","여자","남자")
bt = c("A","B","C")
age = c(23,21,34)
df = data.frame(id, gender, bt, age)
write.csv(df, file="mydata.txt", row.names = FALSE)
#  row.names = FALSE생략시 row name이 2번 나옴
df2 = read.csv("mydata.txt", header = TRUE, sep = ",")
df2
getwd()
###########
# 실행하기 전에 작업디렉토리 확인 및 설정 : getwd(), setwd()
# 파일 경로는 절대경로, 상대경로 모두 가능
survey_data = read.table(file="../data/survey_blank.txt");survey_data
###########
# 실행하기 전에 작업디렉토리 확인 및 설정 : getwd(), setwd()
# 파일 경로는 절대경로, 상대경로 모두 가능
setwd("C:\Users\jeoung\Desktop\1.청취\1.R수업\data")
\data")
survey_data = read.table(file="../data/survey_blank.txt");survey_data
###########
# 실행하기 전에 작업디렉토리 확인 및 설정 : getwd(), setwd()
# 파일 경로는 절대경로, 상대경로 모두 가능
setwd("C:\\Users\\jeoung\\Desktop\\1.청취\\1.R수업\\data")
survey_data = read.table(file="../data/survey_blank.txt");survey_data
survey_data = read.table("../data/survey_blank.txt");survey_data
# 제목줄을 헤더로 지정
survey_data = read.table(file="../data/survey_blank.txt", header=TRUE);survey_data
# 구분자 설정
survey_data = read.table(file="../data/survey_comma.txt", header=TRUE);survey_data
survey_data = read.table(file="../data/survey_comma.txt", header=TRUE, sep=',');survey_data
survey_data = read.table(file="../data/survey_tab.txt", header=TRUE, sep='\t');survey_data
str(survey_data)
# Factor -> 문자로   ....stringsAsFactors또는 as.is=T 파일을 있는 형태그대로 읽음을 의미
survey_data = read.table("../data/survey_tab.txt", header=TRUE, sep='\t', stringsAsFactors = FALSE)
str(survey_data) # [결과] $ major: chr  "생물학" "경영학" "통계학" "컴퓨터공학"
# 결측치 처리 .....여러방법 : is.na(), na.omit() , na.rm=T
data = read.table(file='../data/na_data.txt', header=TRUE,  sep='\t', stringsAsFactors = FALSE)
data = read.table(file='../data/na_data.txt', header=TRUE,  sep='\t', stringsAsFactors = FALSE, na.strings = '0' )  # 0도 결측치로 지정
# 결측치 처리 .....여러방법 : is.na(), na.omit() , na.rm=T
data = read.table(file='../data/na_data.txt', header=TRUE,  sep='\t', stringsAsFactors = FALSE);data
data = read.table(file='../data/na_data.txt', header=TRUE,  sep='\t', stringsAsFactors = FALSE, na.strings = '0' );data  # 0도 결측치로 지정
data["aaa"] = data["ID"]+1
data["aaa"] = data["ID"]+1; data
## 2. read.delim() : tab을 자동으로 인식하여 읽음
survey_data = read.delim("../data/survey_tab.txt", header=T)
survey_data
## 2. read.delim() : tab을 자동으로 인식하여 읽음
survey_data = read.delim("../data/survey_tab.txt", header=T);survey_data
#CSV : Comma Separated Value
# csv 파일을 엑셀로 열면 엑셀형식으로 보이지만 다른 에디터로 열면 ,로 구분하고 있다.
survey_data = read.csv('data/인구주택총조사2015.csv', header=T);survey_data
#CSV : Comma Separated Value
# csv 파일을 엑셀로 열면 엑셀형식으로 보이지만 다른 에디터로 열면 ,로 구분하고 있다.
survey_data = read.csv('../data/인구주택총조사2015.csv', header=T);survey_data
install.packages('readxl')
library(readxl)
survey_data = read_excel('../data/인구주택총조사2015.xlsx')
survey_data = read_excel('../data/인구주택총조사2015.xlsx');survey_data
survey_data = read_excel(path='../data/인구주택총조사2015.xlsx', col_names=TRUE);survey_data  #  col_names=FALSE 확인
#sheet의 이름 또는 sheet순서를 사용하여 접근한 예이다.
survey_data = read_excel(path='../data/인구주택총조사2015.xlsx', sheet='Data', col_names=TRUE);survey_data
survey_data = read_excel(path='../data/인구주택총조사2015.xlsx', sheet=2, col_names=T);survey_data
#설치되어 있는 패키지 내의 데이터 셋을 확인하는 방법
pkg_datalist = data(package = .packages(all.available = TRUE))
pkg_datalist$results
cars
iris
head(iris)
data()
?data
data(package=ggplot2)
data(package=ggplot)
data(package="ggplot")
data(package="ggplot2")
############################dataset를 파일에 저장하기
getwd()
diamonds
diamonds.head()
head(diamonds,3)
############################dataset를 파일에 저장하기
getwd()
write.csv(iris, file = "iris_csv.txt")
write.table(iris, file = "iris_tab.txt" )
read.csv("iris_csv.txt")
read.table("iris_csv.txt", header = TRUE, sep = ",")
read.table(file="iris_csv.txt", header = TRUE, sep = ",")
read.table(file="iris_tab.txt", header = TRUE)
#엑셀데이터 사용하기
install.packages("openxlsx")
library(openxlsx)
write.xlsx(iris, file="iris_excel.xlsx")
mydata = read.xlsx("iris_excel.xlsx")
########################2일차 5시간 (15장, 16장)
#[2일차-5] 15_데이타보기.pdf
#R데이터 목록보기
ls()
########################2일차 5시간 (15장, 16장)
#[2일차-5] 15_데이타보기.pdf
#R데이터 목록보기
ls()
rm(a)
ls()
#모두지우기
rm(list = ls())
ls()
#데이터보기
library(ggplot2)
View(diamonds)
?diamonds
diamonds
head(diamonds, n=5)
tail(diamonds, n=3)
#데이터추출
#2열 추출
diamonds[,2]
#데이터추출
#2열 추출
class(diamonds)
diamonds[,2]
####################
a = diamonds[,"price", drop=TRUE]
mode(a) #numeric
typeof(a) #integer
class(a)
####################
a = diamonds[,"price", drop=TRUE] ;a
mode(diamonds) #list
typeof(diamonds) #list
str(diamonds)
iris
df = tbl_df(iris)  #행과 열을 깔끔하게 출력
#tbl_df는 행의 개수와 열의 개수가 많은 데이터를 취급할 때 굉장히 유용하다.
library(dplyr)
df = tbl_df(iris);df  #행과 열을 깔끔하게 출력
iris
df = tbl_df(iris);df  #행과 열을 깔끔하게 출력
df2 = data.frame(id=c(1,2,3,4), name=c("A","B","C","D")); df2
df3 = tbl_df(df2)
df3 = tbl_df(df2);df3
class(df2)
class(df3)
##########dataframe을 전치하여 모든 변수를 다 볼수 있게해준다.
#데이터형과 처음 데이터 몇개를 보여준다. factor, double, int.....
glimpse(df2) #마찬가지
glimpse(df3) #마찬가지
glimpse(iris)
#############다음은 같은 의미
a = diamonds[,"price"];a
a2 = diamonds[,"price", drop=FALSE];a2 #dataframe유지
class(a) #dataframe
class(a2) #dataframe
a+10000
a[1] #열index
a[,1] #모든행 1열
a[1,1]#1행 1열
a2+10000
a2[1] #열index
a2[,1] #모든행 1열
a2[1,1]#1행 1열
#칼럼이 여러개인 경우 최종결과는 dataframe
diamonds[2, c(1,3,7)]
diamonds[2, 1:3]
diamonds[2, seq(from=2, to=10, by=2)]
diamonds[, "cut"] #최종결과는 dataframe
diamonds[, "cut", drop=FALSE] #최종결과는 Vector
diamonds[, c("cut", "price")] #최종결과는 dataframe
a = diamonds[, "cut"]; class(a) #최종결과는 dataframe
a = diamonds[, "cut", drop=FALSE]; class(a) #최종결과는 Vector
diamonds[, c("cut", "price")]; class(a) #최종결과는 dataframe
a = diamonds[, c("cut", "price")]; class(a) #최종결과는 dataframe
a = diamonds[, "cut"]; class(a) #최종결과는 dataframe
a = diamonds[, "cut", drop=FALSE]; class(a) #최종결과는 Vector
a = diamonds[, c("cut", "price")]; class(a) #최종결과는 dataframe
#변수명중에서 c라는 문자로 시작하는 열들을 추출
diamonds[2, grep("^c", colnames(diamonds))]
#변수명중에서 c라는 문자가 포함된 열들을 추출  ..클래러티(투명함)
diamonds[2, grep("c", colnames(diamonds))]
#변수명중에서 c라는 문자로끝나는 열들을 추출 : table, price
diamonds[2, grep("e$", colnames(diamonds))]
a = grep("^c", c("aa","cc",'caa', 'car',"pp","carret")) #2,3,4,6
a = grep("^c", c("aa","cc",'caa', 'car',"pp","carret"));a #2,3,4,6
diamonds[2, a]
head(diamonds)
a = grep("e$", c("e", "price","aaaa"))  #1,2
a
diamonds[diamonds$cut=='Fair',]
diamonds[diamonds$cut=='Fair'& diamonds$price>15000,]
a = diamonds[diamonds$cut=='Fair' | diamonds$price>=18000,];a
a = diamonds[diamonds$cut=='Fair' | diamonds$price>=18000,]; tail(a)
a = diamonds[diamonds$cut=='Fair' | diamonds$price>=18000,]; a[100:110, ]
a = diamonds[diamonds$cut=='Fair' | diamonds$price>=18000,]; a[100:210, ]
a = diamonds[diamonds$cut=='Fair' | diamonds$price>=18000,]; a[300:310, ]
a = diamonds[diamonds$cut=='Fair' | diamonds$price>=18000,]; a[400:410, ]
diamonds$price>=18000
diamonds[diamonds$price>=18000, c('carat', 'cut','price')]
count(diamonds[diamonds$price>=18000, ])  #true가 312건
sum(diamonds$price>=18000)
sum(diamonds[diamonds$price>=18000,]$price) #price의 합
a[a$cut!='Fair' & a$price>=18000,]
a[a$cut!='Fair' & a$price>=18000,];a
a[(a$cut!='Fair') & (a$price),]
a$cut!='Fair'
a[a$cut!='Fair' & a$price>=18000,];a
a[(a$cut!='Fair') & (a$price),]
a[a$cut!='Fair' & a$price>=18000,];
#########dplyr
diamonds %>% filter(diamonds$cut=='Fair'& diamonds$price>15000) %>% select("carat", "cut", "price")
####diamonds의 조건에 맞는 건들에 대한 price의 합계
sum(diamonds %>% filter(diamonds$price>18000) %>% select("price") )
#데이터수정
library(ggplot2)
diamonds[,c('x','y','z')]
as.numeric(diamonds$x) + as.numeric(diamonds$y)  + as.numeric(diamonds$z)
diamonds$xyz.sum = diamonds$x + diamonds$y + diamonds$z
diamonds$xyz.sum2 = rowSums(diamonds[, c("x","y","z")])
diamonds$xyz.mean = (diamonds$x + diamonds$y + diamonds$z)/3
diamonds$xyz.mean2 = rowMeans(diamonds[, c("x","y","z")])
mode(diamonds$x)
diamonds[1:5, c("x","y","z","xyz.sum","xyz.sum2", "xyz.mean","xyz.mean2")]
str(diamonds)
diamonds[ diamonds$price >= 18000,]
diamonds[ diamonds$price > 18000,]
diamonds[ diamonds$price >= 18000, "price"] = 19000
diamonds[ diamonds$price >= 18000, "price"]
diamonds[ diamonds$price >= 18000, "price"]
a = diamonds[diamonds$cut =="Fair" & diamonds$price, "x"]
a[1000:1500,]
diamonds[diamonds$cut =="Fair" & diamonds$price, "x"] = "NA"
diamonds[diamonds$cut =="Fair",]
#데이터 삭제하기
library(ggplot2)
a = diamonds[1:30, ]
nrow(diamonds)
nrow(a)
data.frame(a)
mode(a)
NROW(a)
b = a[-c(10,20,30),]
nrow(b)
b = a[-(10:20),]
nrow(b)
a[seq(from=1, to=NROW(a), by=10),]
length(a)#칼럼갯수
str(a)
colnames(a)
x <- 1:20
x[-1]  #1제외
#1,2,3row를 제외
iris[-c(1,2,3), c("Sepal.Length", "Sepal.Width")]  #1,2,3 row제외
nrow(iris)
a = c(1,2,3,4,5)
b = c('A','B','C','D',NA)
c = c('가','나','다','라',NA)
mydata = data.frame(a,b,c)
mydata
mydata[is.na(mydata$b), ]
mydata[!is.na(mydata$b), ]
mydata[mydata$a!=1,]
------------------------------------------------------------------
?diamonds
------------------------------------------------------------------
?diamonds
------------------------------------------------------------------
?diamonds
?diamonds
library(ggplot2)
#조건이 하나일때 조건에 맞는 데이터만 추출
a = subset(diamonds, cut=="Premium")
b = subset(diamonds, cut=="Fair")
#조건이 하나일때 조건에 맞는 데이터만 추출
a = subset(diamonds, cut=="Premium");a
b = subset(diamonds, cut=="Fair");b
#또는
d = subset(diamonds, (cut=="Premium" | cut=="Fair"));d #15401
d = subset(diamonds, cut=="Premium" | cut=="Fair")  #15401
d = subset(diamonds, cut=="Premium" | cut=="Fair");d  #15401
c = subset(diamonds, cut==c("Premium","Fair"));c ##틀림 ----  7675건
subset(diamonds, cut=="Premium") #13791
subset(diamonds, cut=="Premium") #13791
subset(diamonds, cut=="Fair")     #1610
count(c)
count(subset(diamonds, cut=="Premium")) + count(subset(diamonds, cut=="Fair"))
count(subset(iris, Species==c("setosa", 'virginica')))#50건 ..오류
count(subset(iris, Species==c("setosa", 'virginica')))#50건 ..오류
count(subset(iris, Species==c("setosa")))#50건
count(subset(iris, Species==c('virginica')))#50건
count(subset(iris, Species=="setosa" | Species=='virginica'))
c = subset(diamonds, cut==c("Premium","Fair"));c ##틀림 ----  7675건
count(c)
count(subset(diamonds, cut=="Premium")) + count(subset(diamonds, cut=="Fair"))
################
v1 = c(100,200)
################
v1 = c(100,200)
aa = "Premium"
bb = "Fair"
b1 = aa==c("Premium","Fair");b1  #TRUE FALSE
b2 = bb==c("Premium","Fair");b2  #FALSE TRUE
v1[b1]
v1[b2]
c(b1, b2)
v1[ c(b1, b2)]  #100  NA
###############
str(diamonds)
###############
str(diamonds)
diamonds$cut
#Levels: Fair < Good < Very Good < Premium < Ideal
levels(diamonds$cut)
nrow(a)
labels(diamonds$cut)
#Levels: Fair < Good < Very Good < Premium < Ideal
levels(diamonds$cut)
nrow(a)
nrow(b)
nrow(c)
nrow(d)
diamonds[ order(diamonds$cut), ]
diamonds[ order(diamonds$cut, decreasing = T), ]
diamonds[ order(diamonds$cut, decreasing = T), ]
nrow(a)
nrow(b)
nrow(c)
nrow(d)
subset(diamonds, cut=='Premium' | color=='E')
subset(diamonds, cut=='Premium' | color=='E')
subset(diamonds, cut=='Premium' & color=='E')
subset(diamonds, cut=='Premium' & color=='E', select= clarity)
subset(diamonds, cut=='Premium' & color=='E', select= c(clarity, price))
subset(diamonds, cut=='Premium' & color=='E', select= clarity:price)
subset(iris, Species != c('setosa' , 'virginica'))
subset(iris, Species != c('setosa' , 'virginica'))
subset(iris, Species != 'setosa' &  Species !='versicolor')
subset(diamonds, cut != 'Ideal' & color !='E')
subset(diamonds, cut != 'Ideal' & color !='E')
subset(diamonds, cut!='Premium' & cut!='Ideal')
# select = -
subset(diamonds, select= -color)
subset(diamonds, select= -c(color,depth,x,y,z))
########################2일차 6시간 SORT
diamonds[order(diamonds$price, decreasing = TRUE),"price"]
diamonds[order(diamonds$price),"price"]
diamonds[order(diamonds$price),]
#설정후 잘 적용되지 않으면 RStudio 재실행
Sys.setlocale("LC_CTYPE","ko_KR.UTF-8")
diamonds[order(diamonds$cut, diamonds$color, diamonds$clarity),]
diamonds[order(diamonds$cut, diamonds$color, decreasing = TRUE),]
diamonds[order(diamonds$cut, diamonds$price, decreasing = TRUE),]
diamonds[order(diamonds$cut, diamonds$depth, decreasing = TRUE),]
diamonds$price.group = ifelse(diamonds$price<5000, "미만","이상")
diamonds
table(iris$Species)
#factor
#table
str(iris)
table(iris$Species)
########################2일차 7,8시간 LAB2
library(readxl)
survey_2014 <- read_xlsx("../data/설문조사.xlsx")
str(survey_2014)
#소속별/성별 조사대상 학생수를 구하라.
survey_2014$성별 <- factor(survey_2014$성별, labels = c("남", "여"))
cnt <- table(소속대학=survey_2014$소속, 성별=survey_2014$성별, useNA = "ifany") #ifany : NA를 분할표에 포함시키고자 할 경우
cnt
colnames(cnt)[3] <- "무응답"
cnt
#소속별 조사대상 지원동기에 따른 학생수의 비율을 구하라.
survey_2014$지원동기 <- factor(survey_2014$지원동기,
labels = c("합격가능성", "장학금", "사회적평판", "졸업후진로",
"교육제도및시설", "학문적흥미와적성", "학사교류제도"))
cnt <- table(survey_2014$지원동기, survey_2014$소속, useNA = "ifany")
cnt
out <- round(prop.table(cnt, 2), 2)
rownames(out)[8] <- "무응답"
out
########################3일차 Do it교재로 진행 #############################
#
#dataframe 다시 정리해보기
#1.만들기
num = factor(c(10,20,30,40,50))
num2 = c(100,200,300,400,500)
num3 = 1:5
chr1 = c("월","화","수","목","금")
########################3일차 Do it교재로 진행 #############################
english <- c(90, 80, 60, 70);english  # 영어 점수 변수 생성
math <- c(50, 60, 100, 20);math    # 수학 점수 변수 생성
df_midterm <- data.frame(english, math);df_midterm
##   english math
## 1      90   50
## 2      80   60
## 3      60  100
## 4      70   20
class <- c(1, 1, 2, 2)
df_midterm <- data.frame(english, math, class);df_midterm
mean(df_midterm$english)  # df_midterm의 english로 평균 산출
mean(df_midterm$english)  # df_midterm의 english로 평균 산출
mean(df_midterm$math)  # df_midterm의 math로 평균 산출
#데이터 프레임 한 번에 만들기
df_midterm <- data.frame(english = c(90, 80, 60, 70), math=c(50, 60, 100, 20), class=c(1, 1, 2, 2));df_midterm
#혼자서 해보기
# 제품	가격	판매량
# 사과	1800	24
# 딸기	1500	38
# 수박	3000	13
df_fruit = data.frame(제품=c("사과","딸기","수박"), 가격=c(1800,1500,3000)); df_fruit
#혼자서 해보기
# 제품	가격	판매량
# 사과	1800	24
# 딸기	1500	38
# 수박	3000	13
df_fruit = data.frame(제품=c("사과","딸기","수박"),
가격=c(1800,1500,3000),
판매량=c(24,38,13)); df_fruit
mean(df_fruit$가격)
mean(df_fruit$가격)
mean(df_fruit$판매량)
#외부 데이터 이용하기 - 축적된 시험 성적 데이터를 불러오자
install.packages("readxl")
library(readxl)
#외부 데이터 이용하기 - 축적된 시험 성적 데이터를 불러오자
setwd("C:\\Users\\jeoung\\Desktop\\1.청취\\1.R수업\\DOit교재\\Data")
read_excel("excel_exam.xlsx")
df_exam = read_excel("excel_exam.xlsx")
mean(df_exam$science)
df_novar = read_excel("excel_exam_novar.xlsx"); df_novar
df_novar = read_excel("excel_exam_novar.xlsx", col_names = F); df_novar
df_sheet = read_excel("excel_exam_sheet.xlsx", sheet = 3); df_sheet
df_csv = read.csv("csv_exam.csv"); df_csv
df_csv = read.csv("csv_exam.csv"); df_csv
#데이터 프레임을 CSV 파일로 저장하기
write.csv(df_midterm,  file = "midterm.csv")
write.csv(df_fruit,  file = "fruit.csv")
save(df_fruit, file = "fruit.rdata")
class(df7["name"]) #data.frame
load("fruit.rdata" )
load(file = "fruit.rdata")
View(df_fruit)
View(df_fruit)
rm(df_fruit)
#data준비
df_exam = read.csv("csv_exam.csv"); df_exam
head(df_exam)
head(df_exam,2)
tail(df_exam)
tail(df_exam,2)
View(df_exam)
dim(df_exam)
str(df_exam)
summary(df_exam)
mpg
class(mpg)
mpg = data.frame(ggplot2::mpg); mpg
mpg = as.data.frame(ggplot2::mpg); mpg
head(mpg,2)
tail(mpg,2)
View(mpg)
View(ggplot2::mpg)
summary(mpg)
str(mpg)
#p110
df_raw = data.frame(var1 = c(1,2,1), var2=c(2,3,2)); df_raw
install.packages("dplyr")
library(dplyr)
df_new = rename(df_raw, v1=var1, v2=var2); df_new
#p112 혼자사 해보기
df_new2 = df_raw
df_new2[1]
df_new2[1,1]
df_new2[1,1] = 99
df_new2
df_raw
mpg_copy = mpg
colnames(mpg_copy)
mpg_copy = rename(mpg_copy, city=cty, hwy = highway); mpg_copy
mpg_copy = rename(mpg_copy, city=cty, highway = hwy ); mpg_copy
mpg_copy = rename(mpg_copy, city=cty, highway = hwy ); colnames(mpg_copy)
colnames(mpg_copy)
colnames(mpg)
colnames(mpg)
colnames(mpg_copy)
#파생변수만들기
#통합연비
mpg$total = (mpg$city + mpg$highway)/2
#파생변수만들기
#통합연비
mpg$total = (mpg$city + mpg$highway)/2
#파생변수만들기
#통합연비
mpg_copy$total = (mpg_copy$city + mpg_copy$highway)/2
mpg_copy %>% select(city,highway, total)
mean(mpg$total)
mean(mpg_copy$total)
summary(mpg_copy)
summary(mpg_copy$total)
hist(mpg_copy$total)
